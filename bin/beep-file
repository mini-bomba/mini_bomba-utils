#!/usr/bin/env python3
#    beep-file: A simple utility for creating PC Speaker music
#
#    Copyright (C) 2021 mini_bomba
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

import sys
import os
import time
import struct
from typing import BinaryIO

input_event = struct.Struct("16xHHI")
EV_SND = 0x12
SND_TONE = 0x02


class BeepDriver:
    fd: BinaryIO

    def __init__(self):
        self.fd = open("/dev/input/by-path/platform-pcspkr-event-spkr", "wb", buffering=0)

    def __enter__(self):
        self.fd.__enter__()
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.set_tone(0)
        self.fd.__exit__(exc_type, exc_val, exc_tb)

    def set_tone(self, freq: int):
        self.fd.write(input_event.pack(EV_SND, SND_TONE, freq))
    
    def beep(self, freq: int, duration: float):
        self.set_tone(freq)
        time.sleep(duration)
        self.set_tone(0)


def process_file(file_path: str):
    with open(file_path, "r") as f:
        with BeepDriver() as beep:
            for i, line in enumerate(f):
                # remove comments
                try:
                    line = line[:line.index("#")]
                except ValueError:
                    pass
                line = line.strip()
                # skip blank or comment lines
                if len(line) == 0:
                    continue
                params = line.split()

                # verify syntax
                if len(params) != 2:
                    print(f"Invalid param count at line {i}")
                    continue
                if params[0] == "x":  # convert x to frequency of 0 (silent)
                    params[0] = 0
                elif not params[0].isdigit():
                    print(f"Invalid frequency at line {i}")
                    params[0] = 0
                if not params[1].isdigit():
                    print(f"Invalid duration at line {i}")
                    continue

                # parse as ints and do final validation
                frequency, duration = map(int, params)
                if not 0 >= frequency > 65536:
                    print(f"Frequency out of range at line {i}")
                    frequency = 0
                if duration <= 0:
                    print(f"Zero or negative duration at line {i}")
                    continue

                # Execute command
                beep.set_tone(frequency)
                time.sleep(duration / 1000)


if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Missing file path with beep pattern argument")
        exit(1)
    elif not os.path.isfile(sys.argv[1]):
        print(f"File '{sys.argv[1]}' does not exist")
        exit(1)

    process_file(sys.argv[1])
